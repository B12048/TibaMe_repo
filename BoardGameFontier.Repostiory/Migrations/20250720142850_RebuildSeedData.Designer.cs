// <auto-generated />
using System;
using BoardGameFontier.Repostiory;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoardGameFontier.Repostiory.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250720142850_RebuildSeedData")]
    partial class RebuildSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TradeItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("TradeItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.GameClickLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ClickedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameDetailId");

                    b.ToTable("GameClickLog");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.GameDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BGFRank")
                        .HasColumnType("int");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MaxTime")
                        .HasColumnType("int");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MinTime")
                        .HasColumnType("int");

                    b.Property<int>("OverallRank")
                        .HasColumnType("int");

                    b.Property<string>("PictureURL1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureURL2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureURL3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<int>("YearReleased")
                        .HasColumnType("int");

                    b.Property<string>("YoutubeURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("engTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("zhtTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("GameDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 14,
                            Artist = "Gavan Brown",
                            BGFRank = 1,
                            Cover = "https://cf.geekdo-images.com/x3zxjr-Vw5iU4yDPg70Jgw__imagepagezoom/img/7a0LOL48K-7JNIOSGtcsNsIxkN0=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic3490053.jpg",
                            Description = "《Brass：伯明翰》是馬丁華萊士2007年傑作《工業革命》的續作，是一款經濟策略遊戲。 《Brass：伯明翰》講述了1770年至1870年工業革命期間，伯明翰企業家們相互競爭的故事。\r\n\r\n            它提供了與前作截然不同的故事線和體驗。與前作一樣，你必須發展、建造和建立你的產業和網絡，以充分利用低或高的市場需求。遊戲分為兩個階段：運河時代（1770-1830年）和鐵路時代（1830-1870年）。獲得最多勝利點數（VP）即可獲勝。運河、鐵路和已建成（已翻轉）的產業板塊的勝利點數在每個階段結束時計算。\r\n\r\n            每輪，玩家根據回合順序軌跡輪流行動，並獲得兩個行動​​來執行以下任意行動（在原版遊戲中）：\r\n\r\n            1) 建造 - 支付所需資源並放置一個工業板塊。\r\n            2) 網路 - 鋪設鐵路/運河，擴展您的網路。\r\n            3) 發展 - 增加一個工業板塊的勝利點數。\r\n            4) 出售 - 出售您的棉花、製成品和陶器。\r\n            5) 貸款 - 貸款 30 英鎊並減少您的收入。\r\n\r\n            《Brass：伯明翰》也新增了第六個行動：\r\n\r\n            6) 偵察 - 棄掉三張牌，並取得一個隨機地點和隨機工業牌。 （此行動取代原版《工業革命》中的「雙重行動建造」。）",
                            Designer = "Martin Wallace",
                            Intro = "建造運輸網並發展工業，引領世界邁向工業革命。",
                            MaxPlayers = 4,
                            MaxTime = 120,
                            MinPlayers = 2,
                            MinTime = 60,
                            OverallRank = 1,
                            PictureURL1 = "https://cf.geekdo-images.com/e2e0wdO8oVNzD0ZAhzi6MQ__imagepagezoom/img/Bi2I5xGnWdGy8aL247j-BjIYTWE=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic3509697.jpg",
                            PictureURL2 = "https://cf.geekdo-images.com/7xNx9k_R_Hr3bp6LMbSJcA__imagepagezoom/img/IUmfX5VU270hz8Wq7fcGtGg4i5o=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic3509698.jpg",
                            PictureURL3 = "https://cf.geekdo-images.com/zfnOi94URpuyNs_cRy7ESw__imagepagezoom/img/-2KRNQcyH22Gkdz0Nt3zwmy-LPU=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic3500869.jpg",
                            Weight = 3.87f,
                            YearReleased = 2018,
                            YoutubeURL = "https://www.youtube.com/embed/KSYcQu6BMBA?si=kR87UgCkyow93Tc7",
                            engTitle = "Brass: Birmingham",
                            zhtTitle = "Brass: 伯明翰"
                        },
                        new
                        {
                            Id = 2,
                            Age = 13,
                            Artist = "Chris Quilliams",
                            BGFRank = 2,
                            Cover = "https://cf.geekdo-images.com/-Qer2BBPG7qGGDu6KcVDIw__imagepagezoom/img/PCn9lAknaUcpXQ3U7Z3rxuNOqDM=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic2452831.png",
                            Description = "《瘟疫危機：傳承版》是一款合作式的劇情戰役遊戲，擁有貫穿整個劇情的主線故事，遊戲會依照玩家表現進行 12 到 24 場遊戲。\r\n\r\n遊戲一開始的機制與經典版《瘟疫危機》非常相似，你們將扮演一組對抗疾病的專家團隊，與時間賽跑，在世界各地移動，處理爆發的疫情熱點，同時研究四種致命疾病的解藥，防止情勢失控。\r\n\r\n每位玩家在自己的回合中可以進行四個動作，包括以不同方式移動（有時需棄掉手牌），建立研究站等建築物、治療疾病（從地圖上移除一顆疾病方塊；若某個顏色的疾病方塊全數清除，該疾病將被根除）、與其他玩家交換卡片，或是在研究站內棄掉五張同色卡片以研發該色疾病的解藥。每位玩家都擁有一個獨特角色，並具備能幫助完成任務的特殊能力。\r\n\r\n在玩家進行完動作後，需抽取兩張牌。這些牌可能包含「疫情」牌，會使地圖上新增疾病方塊，甚至引發「爆發」——使疾病蔓延至鄰近城市。若發生爆發，城市的恐慌等級會上升，使該城市的移動成本提高。\r\n\r\n每個月份，你們有兩次機會完成該月的任務目標。若第一次嘗試成功，即可直接進入下一個月份。若失敗，則會獲得第二次機會，並獲得更多資助（用來取得強力的事件卡）。\r\n\r\n在整個戰役過程中，會不斷加入新的規則與遊戲元件。有時你需要永久變更遊戲內容，例如在卡片上書寫、撕毀卡片，或是在元件上貼上永久貼紙。你的角色可能獲得新技能，也可能產生負面效果，甚至完全失去該角色，使其無法再被使用。",
                            Designer = "Matt Leacock",
                            Intro = "突來的疾病正在世界大量散播中，你的團隊能拯救人類嗎？",
                            MaxPlayers = 4,
                            MaxTime = 60,
                            MinPlayers = 2,
                            MinTime = 60,
                            OverallRank = 2,
                            PictureURL1 = "https://dailyworkerplacement.com/wp-content/uploads/2015/12/pleg1a-1541x1140.jpg",
                            PictureURL2 = "https://nerdologists.com/wp-content/uploads/2015/11/Pandemic.png",
                            PictureURL3 = "https://files.rebel.pl/products/100/302/_98794/rebel-pandemic-legacy-sezon-1-edycja-niebieska-foto2.jpg",
                            Weight = 2.83f,
                            YearReleased = 2015,
                            YoutubeURL = "https://www.youtube.com/embed/g5AfK-QwDaY?si=s-doaJBQpOIxYQ5I",
                            engTitle = "Pandemic Legacy: Season 1",
                            zhtTitle = "瘟疫危機傳承：第一季"
                        },
                        new
                        {
                            Id = 3,
                            Age = 14,
                            Artist = "Loïc Billiau, Dennis Lohausen, Oliver Schlemmer",
                            BGFRank = 3,
                            Cover = "https://cf.geekdo-images.com/k8F-Cp18G2zj6bTcH-a8IA__imagepagezoom/img/Vtxqxe4Y9OT9XGXh6TQxfzeldVM=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic7385009.jpg",
                            Description = "《方舟動物園》是一款高度策略性的桌遊，玩家在遊戲中建造並管理自己的動物園，目標是打造出全球最成功、最受認可的科學化管理設施。遊戲結合了卡牌驅動、板塊放置、集合收集和目標達成等多種機制，提供了豐富的策略深度和高重玩價值。\r\n\r\n            遊戲的核心是行動點數系統，每位玩家擁有五個行動版塊，分別對應不同的行動：建造、動物、卡牌、合作夥伴和贊助者。每個行動版塊有其獨特的強度等級（1到5），使用後會移動到行動槽的最低位置，而其他版塊則向上移動並增強其效果。這種機制使得玩家需要仔細規劃行動順序，以最大化效率。\r\n\r\n            遊戲目標是同時提升「吸引力（Appeal）」和「保育分數（Conservation）」，當兩者在分數軌上相遇或超越時觸發遊戲結束。遊戲結束時，兩條分數軌差距最大者獲勝。這意味著玩家不僅要吸引遊客（透過引進多樣的動物和建造設施），還要積極參與全球保育計畫，釋放動物到野外，並與世界各地的動物園合作。\r\n\r\n            遊戲中包含大量的動物、保育計畫和贊助者卡牌，提供了豐富的選擇和組合，確保每場遊戲都有不同的策略路線。玩家需要管理動物、棲息地、建築物、大學合作夥伴和獨特的特殊建築，同時利用贊助者的支持來獲得額外效益。此外，遊戲還設有單人模式，讓玩家可以獨自挑戰，測試不同的策略。這些機制共同創造了一個引人入勝的遊戲體驗，讓玩家在管理動物園的同時，也能體驗到保育的樂趣與挑戰。",
                            Designer = "Mathias Wigge",
                            Intro = "打造世界級的現代化動物園，推動保育計畫，支援全球的動物園。",
                            MaxPlayers = 4,
                            MaxTime = 150,
                            MinPlayers = 1,
                            MinTime = 90,
                            OverallRank = 3,
                            PictureURL1 = "https://cf.geekdo-images.com/FmxTr5KHI7-TdSt23beK7A__imagepagezoom/img/W3tgiW45vMocYjbtkBLXsAbzrYc=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic6465445.jpg",
                            PictureURL2 = "https://cf.geekdo-images.com/JAAD2e3Lrh8xa-neieiaJA__imagepagezoom/img/EJh24JC2WlGTSxbLk93ri_mNmvY=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic6465443.jpg",
                            PictureURL3 = "https://cf.geekdo-images.com/L4Df_3VQig-lY8nLR7hVxA__imagepagezoom/img/JRMQ2Ohz3gfn98DG3v5SCNP5eHw=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic6461338.jpg",
                            Weight = 3.86f,
                            YearReleased = 2021,
                            YoutubeURL = "https://www.youtube.com/embed/n9_yGqR6-0s?si=u8M7a9_x2D1rD_tI",
                            engTitle = "Ark Nova",
                            zhtTitle = "方舟動物園"
                        });
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Claps")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageView")
                        .HasColumnType("int");

                    b.Property<int>("RelatedGameId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Claps = 9999,
                            Content = "歡迎來到 Board Game Frontier！這裡是桌遊愛好者的天堂，快來探索我們的遊戲庫和社群吧！",
                            Created = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageView = 111,
                            RelatedGameId = 1,
                            Title = "Board Game Frontier 上線啦！"
                        },
                        new
                        {
                            Id = 2,
                            Claps = 111,
                            Content = "《血色狂怒：英靈殿》的故事發生在諸神黃昏終結世界之後，是一部獨立的續作，其遊戲玩法與 2015 年的原版《血色狂怒》相似，但遊戲玩法上的差異也與遊戲的新設定英靈殿相呼應。 ",
                            Created = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageView = 43333,
                            RelatedGameId = 2,
                            Title = "區控大作版權易手！全新續作《血色狂怒：英靈殿》"
                        },
                        new
                        {
                            Id = 3,
                            Claps = 9,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vitae ex a enim aliquam placerat vitae tempor odio. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent eu mauris nec nisi tempor aliquam. Integer id cursus neque. Morbi convallis eget nisi sed ullamcorper. Praesent mollis sapien quis vehicula luctus. Curabitur fringilla, risus nec efficitur fringilla, diam tellus maximus nibh, et posuere odio massa in arcu. Vestibulum faucibus eros sollicitudin lacus mollis, a tempus lacus egestas. Nam vitae lectus ipsum. Phasellus eget condimentum leo, quis suscipit massa. Cras scelerisque lorem quis nulla egestas, feugiat gravida magna vulputate. Nunc dapibus dapibus volutpat. Fusce aliquet fringilla felis id mattis. Donec finibus auctor felis. Nulla ac efficitur eros. Aenean lectus urna, pretium non luctus nec, suscipit in lorem.\r\n\r\nFusce non consequat quam, bibendum sodales quam. Ut venenatis nulla at metus facilisis malesuada. Vivamus vitae enim dui. Etiam eu convallis est, ornare aliquam augue. Etiam tincidunt nisl ac ultrices imperdiet. Donec tempus purus nec tincidunt facilisis. Nulla vehicula leo in eleifend suscipit. Duis congue lacus non vulputate sollicitudin. Duis hendrerit eleifend eros at bibendum. In pellentesque fringilla diam, eget porttitor leo sollicitudin vel. Nam sed nulla purus. Pellentesque auctor nec eros ac iaculis. Aliquam sed lorem scelerisque, scelerisque ligula vel, faucibus dui.\r\n\r\nMaecenas et gravida magna, sit amet placerat nisl. Ut porta elit ac gravida vulputate. Aliquam eu bibendum est. Phasellus orci tortor, malesuada id enim sit amet, molestie mattis ante. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer placerat velit nulla. Mauris suscipit dui at porttitor interdum. Nunc dignissim ultrices faucibus. Nunc bibendum sit amet turpis eu aliquet. Duis ac lectus consectetur, pulvinar justo vel, pretium elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vitae ipsum porttitor, malesuada augue non, mollis magna. Donec eleifend pretium semper. Aliquam facilisis sagittis nisl, nec suscipit tellus accumsan eget. Sed mollis volutpat tincidunt. Nullam sed auctor dolor, in interdum sapien.\r\n\r\nMauris maximus quis elit non egestas. Pellentesque accumsan erat et turpis mattis volutpat. Aliquam convallis ipsum ac sapien commodo commodo ac in quam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam id ante est. Sed dignissim ac urna auctor luctus. Quisque non porta massa. Sed nibh quam, posuere ut viverra et, egestas egestas neque. Nulla condimentum turpis ac lobortis convallis. Fusce risus dolor, vestibulum at massa mattis, malesuada consequat lectus. Donec maximus ligula quis urna iaculis laoreet. Nunc sed rhoncus magna. Praesent quis sollicitudin dui.\r\n\r\nDonec luctus diam nisi. Morbi ultricies ipsum sapien, et molestie risus sagittis et. Nunc bibendum vitae nulla et posuere. Nulla facilisi. Integer pharetra, augue sed scelerisque vehicula, mauris mi scelerisque orci, eget varius felis quam ullamcorper lectus. Nunc rutrum metus sit amet diam porta facilisis. Quisque pellentesque diam lectus, vitae aliquet metus tincidunt vitae. Maecenas congue leo eget magna luctus, ac tempor massa fringilla. Integer euismod magna eu erat venenatis, eget pharetra justo sagittis. Aenean laoreet ultrices molestie. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. In eget leo non purus convallis scelerisque at et ligula.",
                            Created = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageView = 11,
                            RelatedGameId = 3,
                            Title = "[新銳25]台灣最盛大的桌上遊戲展覽，將於9月24日於松菸舉辦"
                        });
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("AnswerCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnswererId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("QuestionCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TradeItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswererId");

                    b.HasIndex("QuestionerId");

                    b.HasIndex("TradeItemId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "超喜歡這款遊戲的互動。每次決策將取決於對手的行動。行動通常不會帶來負面影響。對手的行動會為你提供（或取消）一些選項。這款遊戲在長期決策和短期決策之間取得了很好的平衡。你的8張牌限制了你的行動或去向，但你仍然可以用8張牌制定相當長遠的計劃。",
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 1,
                            Stars = 5,
                            Title = "桌遊玩家一生必玩"
                        },
                        new
                        {
                            Id = 2,
                            Comments = "廢話不多說，傑作!",
                            CreatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 1,
                            Stars = 4,
                            Title = "Masterpiece"
                        },
                        new
                        {
                            Id = 3,
                            Comments = "今天第一次推坑給女朋友玩這款遊戲，對方除了能理解遊戲的玩法外，也非常投入整個遊戲過程。沒想到重度策略遊戲竟然能如此成功，雖然最後我不小心把她的關鍵酒桶搶走了，導致她生氣了，所以先給這個遊戲3分，之後再回來修改。",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 1,
                            Stars = 3,
                            Title = "推坑給女朋友玩"
                        });
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Reel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 7, 20, 22, 28, 48, 846, DateTimeKind.Local).AddTicks(8211),
                            ImageURL = "https://cf.geekdo-images.com/TMVDTy12ItHsaZ-JAYGpxg__imagepage/img/tFZjDb0JcpmEMADhCrFAzTBNriI=/fit-in/900x600/filters:no_upscale():strip_icc()/pic7744212.jpg",
                            UserName = "s72503013"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2025, 7, 20, 22, 28, 48, 846, DateTimeKind.Local).AddTicks(8214),
                            ImageURL = "https://cf.geekdo-images.com/c0PuKfxG50cj5ckVDhzjPw__imagepage/img/tv_s02vyRBmG3TBWszeMNjp3tSY=/fit-in/900x600/filters:no_upscale():strip_icc()/pic6559921.jpg",
                            UserName = "利維亞的傑洛特"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2025, 7, 20, 22, 28, 48, 846, DateTimeKind.Local).AddTicks(8215),
                            ImageURL = "https://cf.geekdo-images.com/klFnibADgbKMTmf8IUUksQ__imagepagezoom/img/yylBySya3gsdkJqNkV8a08SvKK4=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic4250196.jpg",
                            UserName = "ZenYuChen"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2025, 7, 20, 22, 28, 48, 846, DateTimeKind.Local).AddTicks(8216),
                            ImageURL = "https://cf.geekdo-images.com/FmxTr5KHI7-TdSt23beK7A__imagepagezoom/img/W3tgiW45vMocYjbtkBLXsAbzrYc=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic6465445.jpg",
                            UserName = "Han Aka U8"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2025, 7, 20, 22, 28, 48, 846, DateTimeKind.Local).AddTicks(8217),
                            ImageURL = "https://cf.geekdo-images.com/Kl7Ozg_a4GLkwE2kg9pAzQ__imagepagezoom/img/SsINuYi9NetbxGVVqN6iyoaaGFM=/fit-in/1200x900/filters:no_upscale():strip_icc()/pic8967559.jpg",
                            UserName = "marioamario258"
                        });
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReportedId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportedType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolloweeId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FolloweeId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RelatedItemId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedItemType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TriggerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("TriggerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GameDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrls")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GameDetailId");

                    b.HasIndex("TagId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Exception")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RequestPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.TradeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImageUrls")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("TradeItems");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TradeItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TradeItemId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AllowCommentNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowFollowNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowLikeNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSearch")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowTradeNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsProfilePublic")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("ShowBirthday")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFavorites")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFollowers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFollowing")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowGender")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhoneNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowTradeHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomUserRoles");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Announcement", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Cart", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.CartItem", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.TradeItem", "TradeItem")
                        .WithMany("CartItems")
                        .HasForeignKey("TradeItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("TradeItem");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Favorite", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.GameClickLog", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.GameDetail", "GameDetail")
                        .WithMany()
                        .HasForeignKey("GameDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameDetail");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.QuestionAnswer", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Answerer")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("AnswererId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Questioner")
                        .WithMany("AskedQuestions")
                        .HasForeignKey("QuestionerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.TradeItem", "TradeItem")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("TradeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answerer");

                    b.Navigation("Questioner");

                    b.Navigation("TradeItem");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Report", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Reporter")
                        .WithMany("ReportsMade")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Comment", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.Social.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BoardGameFontier.Repostiory.Entity.Social.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Follow", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Followee")
                        .WithMany("Followers")
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Like", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.Social.Comment", null)
                        .WithMany("Likes")
                        .HasForeignKey("CommentId");

                    b.HasOne("BoardGameFontier.Repostiory.Entity.Social.Post", null)
                        .WithMany("Likes")
                        .HasForeignKey("PostId");

                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Notification", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Trigger")
                        .WithMany("TriggeredNotifications")
                        .HasForeignKey("TriggerId");

                    b.Navigation("Receiver");

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Post", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.GameDetail", "GameDetail")
                        .WithMany()
                        .HasForeignKey("GameDetailId");

                    b.HasOne("BoardGameFontier.Repostiory.Entity.Social.Tag", null)
                        .WithMany("Posts")
                        .HasForeignKey("TagId");

                    b.Navigation("Author");

                    b.Navigation("GameDetail");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.PostTag", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.Social.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.Social.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.SystemLog", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "User")
                        .WithMany("UserSystemLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.TradeItem", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Seller")
                        .WithMany("TradeItems")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Transaction", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Buyer")
                        .WithMany("BoughtTransactions")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "Seller")
                        .WithMany("SoldTransactions")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoardGameFontier.Repostiory.Entity.TradeItem", "TradeItem")
                        .WithMany("Transactions")
                        .HasForeignKey("TradeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");

                    b.Navigation("TradeItem");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.UserRole", b =>
                {
                    b.HasOne("BoardGameFontier.Repostiory.Entity.UserProfile", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Comment", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.Social.Tag", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.TradeItem", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BoardGameFontier.Repostiory.Entity.UserProfile", b =>
                {
                    b.Navigation("AnsweredQuestions");

                    b.Navigation("AskedQuestions");

                    b.Navigation("BoughtTransactions");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Likes");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("ReportsMade");

                    b.Navigation("SoldTransactions");

                    b.Navigation("TradeItems");

                    b.Navigation("TriggeredNotifications");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSystemLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
