<div class="container position-relative mt-4">
    <h4 class="text-center border p-2">我的商品</h4>
    <form id="editProductForm">
        <!-- 包覆整體內容的背景卡片 -->
        <div id="editProduct" class="card shadow p-4 mt-4" style="background-color: #f8f9fa;">
            <div class="container" style="max-width: 1000px;">
                <div class="row form-section">
                    <input type="hidden" name="ProductId" :value="product.productId">
                    <!-- 商品圖片 -->
                    <div class="col-md-3">
                        <label class="form-label">商品圖片 <span class="required">*</span></label>

                        <!-- 預覽區域（動態插入圖片） -->
                        <div id="image-preview-container" class="d-flex flex-wrap gap-2 mb-2"></div>

                        <!-- 上傳按鈕 -->
                        <input type="file" id="image-upload" class="form-control" accept="image/*" multiple v-on:change="previewMultipleImages">


                        <!-- 錯誤提示 -->
                        <div id="upload-error" class="text-danger mt-1" style="display:none;"></div>
                    </div>

                    <!-- 商品名稱與描述 -->
                    <div class="col-md-9">
                        <div class="mb-3">
                            <label class="form-label">商品名稱 <span class="required">*</span></label>
                            <input type="text" name="ProductName" class="form-control" placeholder="請輸入商品名稱" v-model="product.productName">
                        </div>
                        <div>
                            <label class="form-label">商品描述 <span class="required">*</span></label>
                            <textarea class="form-control" name="Description" rows="2" placeholder="請輸入商品描述" v-model="product.description"></textarea>
                        </div>
                    </div>

                    <!-- 價格與分類 -->
                    <div class="col-md-6 mt-3">
                        <label class="form-label">價格 <span class="required">*</span></label>
                        <input type="number" name="Price" class="form-control" placeholder="請輸入商品金額" v-model="product.price">
                    </div>

                    <div class="col-md-6 mt-3">
                        <label class="form-label">商品分類 <span class="required">*</span></label>
                        <select class="form-select" name="Category" v-model="product.category">
                            <option selected disabled>請選擇分類</option>
                            <option value="1">家庭遊戲</option>
                            <option value="2">派對遊戲</option>
                            <option value="3">兒童遊戲</option>
                            <option value="4">玩家遊戲</option>
                            <option value="5">卡牌遊戲</option>
                            <option value="6">雙人遊戲</option>
                        </select>
                    </div>

                    <!-- 庫存數量 -->
                    <div class="col-md-6 mt-3">
                        <label class="form-label">庫存數量 <span class="required">*</span></label>
                        <input type="number" name="StockQuantity" class="form-control" placeholder="請輸入商品庫存數量" v-model="product.stockQuantity">
                    </div>
                </div>

                <br />

                <!-- 底部新增商品按鈕 -->
                <div class="text-center">
                    <button type="button" class="btn btn-outline-secondary" v-on:click="updateProductDetail">儲存編輯</button>
                    <button type="button" class="btn btn-outline-secondary" v-on:click="beforeDelete">刪除商品</button>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- CSS -->
<style>
    .product-img,
    .preview-image {
        width: 80px !important;
        height: 80px !important;
        object-fit: cover;
        border: 1px solid #ccc;
        border-radius: 4px;
        display: block;
    }

    .preview-image-wrapper {
        position: relative;
        display: inline-block;
        margin-right: 8px;
        margin-bottom: 8px;
    }

    .delete-btn {
        position: absolute;
        top: -8px;
        right: -8px;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 14px;
        cursor: pointer;
        line-height: 17px;
        text-align: center;
        padding: 0;
    }

        .delete-btn:hover {
            background-color: red;
        }
</style>

<!-- 引入 Vue 和 Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>

<!-- JS 多圖預覽 + Vue 3 -->
<script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
          uploadedImages: [],
          dbImages: [],
          maxImages: 10,
          product: {
            productId: null,
            productName: '',
            imageUrl: '',
            price: '',
            stockQuantity: '',
            description: '',
            category: 0
          }
        };
      },
      methods: {
        getProductDetail() {
          fetch('/api/product/getProductDetail', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: this.product.productId })
          })
            .then(res => res.json())
            .then(data => {
              this.product.imageUrl = data.imageUrl;
              this.product.productName = data.productName;
              this.product.price = data.price;
              this.product.stockQuantity = data.stockQuantity;
              this.product.description = data.description;
              this.product.category = data.category;
              if (this.product.imageUrl) {
                  const urls = this.product.imageUrl.split(',');
                  urls.forEach(url => {
                    if (url.trim()) {
                        this.dbImages.push(url.trim());
                        this.createPreviewImage(url.trim(), true, null);
                    }
                  });
              }
            })
            .catch(err => {
              console.error('取得商品明細失敗：', err);
            });
        },
        getProductIdFromUrl() {
          const pathSegments = window.location.pathname.split('/');
          return pathSegments[pathSegments.length - 1];
        },
        updateProductDetail() {
            const form = document.getElementById('editProductForm');
            const formData = new FormData(form);
            formData.append('oldImages', this.dbImages.join(','));
            // 將 JS 暫存的圖片加入 FormData
            this.uploadedImages.forEach(file => formData.append("Images", file));
            fetch('/api/product/updateProductDetail', {
                method: 'POST',
                body: formData
            })
            .then(res=>res.json())
            .then(data=>{
                Swal.fire({
                    icon: 'success',
                    title: '商品更新成功',
                    confirmButtonText: '確認'
                }).then(() => {
                    window.location.href = "/Member/IndexMember?action=productManage";
                });
            })
            .catch(err=>{
                console.error(err);
            });
        },
        async deleteProductDetail() {
          await fetch('/api/product/deleteProductDetail', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: this.product.productId })
          })
            .then(res => res.json())
            .then(data => {
              this.product = data;
            })
            .catch(err => {
              console.error('刪除商品明細失敗：', err);
            });
        },
        beforeDelete(){
            Swal.fire({
                icon: 'warning',
                title: '是否確認刪除?',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '確認',
                cancelButtonText: '取消',
                allowOutsideClick: false
            }).then(async (result) => {
                if(await result.isConfirmed){
                    await this.deleteProductDetail();
                    window.location.href = "/Member/IndexMember?action=productManage";
                } 
            });
        },
        previewMultipleImages(event) {
          const files = Array.from(event.target.files);
          const errorContainer = document.getElementById('upload-error');

          let availableSlots = this.maxImages - this.uploadedImages.length;

          if (files.length > availableSlots) {
            errorContainer.textContent = `最多只能上傳 ${this.maxImages} 張圖片，您已上傳 ${this.uploadedImages.length} 張。`;
            errorContainer.style.display = 'block';
            event.target.value = '';
            return;
          } else {
            errorContainer.style.display = 'none';
          }

          const validFiles = files.slice(0, availableSlots);

          validFiles.forEach(file => {
            if (!file.type.startsWith('image/')) return;

            const reader = new FileReader();
            reader.onload = (e) => {
              this.createPreviewImage(e.target.result, false, file);
              this.uploadedImages.push(file);
            };
            reader.readAsDataURL(file);
          });
          event.target.value = '';
        },
        createPreviewImage(src, isDbImage = false, file = null) {
          const previewContainer = document.getElementById('image-preview-container');
          const errorContainer = document.getElementById('upload-error');

          const wrapper = document.createElement('div');
          wrapper.className = 'preview-image-wrapper';

          const img = document.createElement('img');
          img.src = src;
          img.className = 'preview-image';

          const deleteBtn = document.createElement('button');
          deleteBtn.innerHTML = '&times;';
          deleteBtn.className = 'delete-btn';

          deleteBtn.onclick = () => {
            wrapper.remove();
            errorContainer.style.display = 'none';

            if (isDbImage) {
              this.dbImages = this.dbImages.filter(i => i !== src);
            } else if (file) {
              this.uploadedImages = this.uploadedImages.filter(i => i !== file);
            }

          };

          wrapper.appendChild(img);
          wrapper.appendChild(deleteBtn);
          previewContainer.appendChild(wrapper);
        }
      },
      mounted() {
        this.product.productId = this.getProductIdFromUrl();
        this.getProductDetail();
      }
    }).mount('#editProduct');
</script>
