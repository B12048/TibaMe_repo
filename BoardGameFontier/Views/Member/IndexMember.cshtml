@* @model EditProfileViewModel *@  @* // 這個是用來編輯個人資料的 ViewModel *@
@using BoardGameFontier.Services
@using BoardGameFontier.Models.ViewModels
@using Newtonsoft.Json
@section Styles{
    <style>
        .sidebar{
            background-color: rgba(255, 255, 255, 0.1) !important;
            backdrop-filter: blur(10px);
            border: rgba(20, 184, 166, 0.2) solid 0.5px;
        }
        .sidebar-right{
            background-color: rgba(255, 255, 255, 0.1) !important;
            backdrop-filter: blur(10px);
            border: rgba(20, 184, 166, 0.2) solid 0.5px;
        }
        .sidebar ul li {
            font-size: 20px;
            color: #55b3a5;
            margin-bottom: 16px;
            cursor: pointer;
            transition: color 0.2s ease;
            padding-left: 0;
            list-style: none;
        }
        .sidebar ul li:hover {
            color: #2b7a6b;
        }

        .container {
            max-width: 100vw;
        }
        
        </style>
}
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var sidebarData = ViewBag.FollowersData as CommunityViewModel;
}
@* 這邊在顯示帳號刪除失敗的錯誤訊息 *@
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}


<div class="main-container d-grid" style="grid-template-columns: 1fr 3.5fr 1fr; min-height:100vh;">
    <!-- 左側選單 -->
    <div class="sidebar bg-white border-end px-3 pt-4 d-flex flex-column text-center" style="height:100% ">
        <!-- 桌面版選單 -->
        <div class="d-none d-md-block d-md-flex flex-column" style="height: 100%;">
            <div class="flex-grow-1">
                <h3 style="font-weight:bold">功能選單</h3>
                <hr />
                <ul class="list-unstyled">
                    <li onclick="loadSection('Profile')">個人資訊</li>
                    <li onclick="loadSection('EditProfile')">編輯資料</li>
                    <li onclick="loadSection('MyPost')">我的貼文</li>
                    <li onclick="loadSection('History')">交易紀錄</li>
                    <li onclick="loadSection('Events')">參加活動</li>
                    <li onclick="loadSection('Market')">商品管理</li>
                    <li onclick="loadSection('Settings')">隱私設定</li>
                </ul>
            </div>
            <!-- 桌面版刪除按鈕 - 推到底部 -->
            <div class="mt-auto pb-3">
                <button class="btn btn-outline-danger w-100" data-bs-toggle="modal" data-bs-target="#deleteAccountModal">
                    刪除帳號
                </button>
            </div>
        </div>
        
        <!-- 手機版下拉選單 -->
        <div class="dropdown d-md-none">
            <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown">
                功能選單
            </button>
            <ul class="dropdown-menu w-100">
                <li><a class="dropdown-item" href="javascript:void(0)" onclick="loadSection('Profile')">個人資訊</a></li>
                <li><a class="dropdown-item" href="javascript:void(0)" onclick="loadSection('EditProfile')">編輯資料</a></li>
                <li><a class="dropdown-item" href="javascript:void(0)" onclick="loadSection('MyPost')">我的貼文</a></li>
                <li><a class="dropdown-item" href="javascript:void(0)" onclick="loadSection('History')">交易紀錄</a></li>
                <li><a class="dropdown-item" href="javascript:void(0)" onclick="loadSection('Events')">參加活動</a></li>
                <li><a class="dropdown-item" href="javascript:void(0)" onclick="loadSection('Market')">商品管理</a></li>
                <li><a class="dropdown-item" href="javascript:void(0)" onclick="loadSection('Settings')">隱私設定</a></li>
            </ul>
        </div>
    </div>
    
    <!-- 手機版刪除按鈕區域 -->
    <div class="delete-button-area d-md-none bg-white px-3 py-3 mt-4"  border-top: 2px solid #ffeaa7;">
        <button class="btn btn-outline-danger w-100" data-bs-toggle="modal" data-bs-target="#deleteAccountModal">
            刪除帳號
        </button>
    </div>
    <!-- 中間內容 -->
    <div class="container">
        <div class="card">
            <!-- 統一內容區域 - 所有功能都透過 AJAX 載入 -->
            <div id="content-area-main"></div>
        </div>
    </div>
    <!-- 右側追蹤者列表 -->
    <div class="sidebar-right bg-white border-start px-3 pt-4">
        <h5 class="mb-3">
            <i class="bi bi-people"></i> 
            我的粉絲 
            <small class="text-muted">(@(sidebarData?.CurrentUser?.FollowersCount ?? 0))</small>
        </h5>
        
        @if (sidebarData?.RecentFollowers?.Any() == true)
        {
            <div class="followers-content">
                @foreach (var follower in sidebarData.RecentFollowers)
                {
                    <div class="d-flex align-items-center p-2 mb-2 border-bottom">
                        <div class="me-2">
                            @if (!string.IsNullOrEmpty(follower.ProfilePictureUrl))
                            {
                                <img src="@follower.ProfilePictureUrl" alt="@follower.DisplayName" 
                                     class="rounded-circle" width="40" height="40" style="object-fit: cover;" />
                            }
                            else
                            {
                                <i class="bi bi-person-circle" style="font-size: 2.5rem; color: #6c757d;"></i>
                            }
                        </div>
                        <div class="flex-grow-1">
                            <div class="fw-semibold small">@follower.DisplayName</div>
                            <div class="text-muted" style="font-size: 0.75rem;">
                                @follower.FollowedTimeAgo
                                <br />
                                @if (follower.IsMutualFollow)
                                {
                                    <span class="text-primary">• 互相追蹤</span>
                                }
                            </div>
                        </div>
                        <div>
                            <a href="/Member/PlayerProfile?id=@follower.Id" 
                               class="btn btn-outline-primary btn-sm" target="_blank">
                                查看
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-4 text-muted">
                <i class="bi bi-people" style="font-size: 2rem;"></i>
                <div class="mt-2 small">目前還沒有粉絲</div>
            </div>
        }
    </div>
</div>



@section Scripts {
    <!-- Vue.js CDN 載入 - 統一提供給所有模組使用 - 生產版本 -->
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
    
    <script src="~/js/boardgametags.js"></script>   

    <!--  上傳圖片的 Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const uploadForm = document.getElementById('uploadForm');
            if (uploadForm) {
                uploadForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    try {
                        const response = await fetch('/Member/UploadImage', {
                            method: 'POST',
                            body: formData
                        });
                        if (response.ok) {
                            location.reload(); // 上傳成功後重新整理頁面
                        } else {
                            alert("上傳失敗");
                        }
                    } catch (error) {
                        console.error('上傳錯誤：', error);
                        alert("上傳失敗");
                    }
                });
            }
        });
    </script>

    <!--  載入內容的 Script -->
    <script>
         // 統一的功能模組載入機制
         // 移除狀態追蹤，每次都重新初始化 Vue 以確保正確綁定

         function loadSection(sectionName) {
             // 統一透過 AJAX 載入所有功能模組
             replaceSection(sectionName);
         }

        // 統一的 AJAX 載入與初始化機制
         function replaceSection(sectionName) {
             fetch(`/Member/LoadSection?section=${sectionName}`)
                 .then(response => response.text())
                 .then(html => {
                     const contentArea = document.getElementById("content-area-main");
                     contentArea.innerHTML = html;
                     
                     // 強制執行動態載入的 Scripts
                     executePartialViewScripts(contentArea);
                     
                     // 通用初始化
                     reinit();
                     
                     // Vue 模組初始化（確保 script 和資料都已載入）
                     setTimeout(() => {
                         initializeModuleVue(sectionName);
                     }, 300);
                 })
                 .catch(error => {
                     console.error('載入內容失敗：', error);
                     document.getElementById("content-area-main").innerHTML = 
                         '<div class="alert alert-danger">載入失敗，請重新整理頁面後再試</div>';
                 });
         }
         
         // 執行動態載入 Partial View 中的 Scripts - 避免重複宣告
         function executePartialViewScripts(container) {
             const scripts = container.querySelectorAll('script');
             scripts.forEach((oldScript, index) => {
                 try {
                     if (oldScript.src) {
                         // 外部 script - 跳過 CDN 載入，在 AJAX 環境下可能有問題
                         console.log(`跳過外部 script ${index}: ${oldScript.src}（避免 AJAX 環境下的載入問題）`);
                     } else {
                         // 內聯 script - 直接執行，但先清理可能的重複變數
                         let scriptContent = oldScript.textContent || oldScript.innerHTML;
                         if (scriptContent.trim()) {
                             // 檢查是否包含 serverInitialData 宣告並完整修正
                             if (scriptContent.includes('const serverInitialData =')) {
                                 // console.log(`發現 serverInitialData 宣告，準備修正 script ${index}`); // 生產環境移除
                                 // 修正變數宣告
                                 scriptContent = scriptContent.replace('const serverInitialData =', 'window.serverInitialData =');
                                 // 修正所有獨立的 serverInitialData 引用
                                 scriptContent = scriptContent.replace(/\bserverInitialData\b/g, 'window.serverInitialData');
                                 // console.log(`修正 script ${index} 中的變數宣告與引用`); // 生產環境移除
                             }
                             
                             eval(scriptContent);
                             // console.log(`內聯 script ${index} 已執行`); // 生產環境移除
                             
                             // 檢查資料是否正確設定
                             if (scriptContent.includes('window.serverInitialData =')) {
                                 // console.log('檢查 serverInitialData 設定:', window.serverInitialData); // 生產環境移除
                             }
                             
                             // 檢查 Vue 初始化函數是否正確載入
                             if (scriptContent.includes('initMarketVue')) {
                                 // console.log('發現 initMarketVue 函數定義，檢查:', typeof window.initMarketVue); // 生產環境移除
                             }
                             if (scriptContent.includes('initMyPostVue')) {
                                 // console.log('發現 initMyPostVue 函數定義，檢查:', typeof window.initMyPostVue); // 生產環境移除
                             }
                         }
                     }
                 } catch (error) {
                     console.error(`Script ${index} 執行失敗:`, error);
                 }
             });
         }
         
         // Vue 模組初始化管理
         function initializeModuleVue(sectionName) {
             // console.log(`正在初始化 Vue 模組: ${sectionName}`); // 生產環境移除
             
             switch(sectionName) {
                 case 'Market':
                     // 清理現有實例避免衝突
                     if (window.marketApp) {
                         try {
                             window.marketApp.unmount();
                         } catch (e) {
                             console.log('清理舊的 Market Vue 實例');
                         }
                         window.marketApp = null;
                     }
                     
                     // 確保 Vue 初始化函數存在（添加超時機制）
                     let marketRetryCount = 0;
                     const maxRetries = 30; // 最多重試 30 次（3 秒）
                     
                     const waitForMarketReady = () => {
                         if (window.initMarketVue) {
                             try {
                                 // console.log('Market 初始化函數已準備'); // 生產環境移除
                                 window.initMarketVue();
                                 // console.log('Market Vue 初始化成功'); // 生產環境移除
                             } catch (error) {
                                 console.error('Market Vue 初始化失敗:', error);
                             }
                         } else if (marketRetryCount < maxRetries) {
                             marketRetryCount++;
                             console.log(`等待 Market 初始化函數載入... (${marketRetryCount}/${maxRetries})`, { 
                                 initFunc: !!window.initMarketVue 
                             });
                             setTimeout(waitForMarketReady, 100);
                         } else {
                             console.error('Market Vue 初始化超時，停止重試');
                             // console.log('嘗試檢查是否有 script 執行錯誤'); // 生產環境移除
                         }
                     };
                     
                     waitForMarketReady();
                     break;
                     
                 case 'MyPost':
                     // 清理現有實例避免衝突
                     if (window.myPostApp) {
                         try {
                             window.myPostApp.unmount();
                         } catch (e) {
                             console.log('清理舊的 MyPost Vue 實例');
                         }
                         window.myPostApp = null;
                     }
                     if (window.myPostAppInstance) {
                         window.myPostAppInstance = null;
                     }
                     
                     // 確保 Vue 初始化函數存在且資料已準備
                     const waitForMyPostReady = () => {
                         if (window.initMyPostVue && window.serverInitialData) {
                             try {
                                 // console.log('MyPost 資料已準備:', window.serverInitialData); // 生產環境移除
                                 window.initMyPostVue();
                                 // console.log('MyPost Vue 初始化成功'); // 生產環境移除
                             } catch (error) {
                                 console.error('MyPost Vue 初始化失敗:', error);
                             }
                         } else {
                             console.log('等待 MyPost 資料載入...', { 
                                 initFunc: !!window.initMyPostVue, 
                                 data: !!window.serverInitialData 
                             });
                             setTimeout(waitForMyPostReady, 100);
                         }
                     };
                     
                     waitForMyPostReady();
                     break;
                     
                 // 其他功能模組不需要特殊初始化
                 default:
                     // console.log(`${sectionName} 不需要 Vue 初始化`); // 生產環境移除
                     break;
             }
         }

         // 預設載入 Profile 區塊
          window.onload = function(){
              const params = new URLSearchParams(window.location.search);
              const action = params.get('action');
              action == "productManage" ? loadSection('Market') : loadSection('Profile');
          };
      
    </script>

    <!--Ajax回傳-->
    <script>
              function saveEdit() {

            // 取得表單元素
            const form = document.getElementById('editProfileForm');
            const formData = new FormData(form);
            //先取使用者新輸入的暱稱，querySelector是CSS選擇器 trim去頭去尾(多餘的空白)
            const newName = (form.querySelector('[name="DisplayName"]')?.value || '').trim();

            fetch('/Member/EditProfile', {
                method: 'POST',
                body: formData // 直接帶整份表單（包含 AntiForgeryToken）
                //fetch 自動處理 multipart/form-data，headers 不要自己設
            })
            .then(response => response.text()) // 若後端回 partial view 可用 .text()

            .then(data => {

                document.getElementById('content-area-main').innerHTML = data;
                reinit();

                const nav = document.getElementById('nav-user');
                //下面這行是在抓若暱稱為空值時，要顯示的是UserName
                const userName =nav?.dataset.username || '';
                nav.textContent = newName || userName ;

            })

            .catch(error => {
                console.error('載入內容失敗：', error);
             });
        }

    </script>

    <!--確認密碼監聽-->
    <script>
                
                        $(document).on('input', '#NewPassword, #ConfirmPassword', function () {
                    const newPwd = $('#NewPassword').val();
                    const confirmPwd = $('#ConfirmPassword').val();
                    const $msg = $('#ErrorMessage');
                    if (!newPwd || !confirmPwd) {
                        $msg.text('');
                        $msg.css('color', '');
                        return;
                    }
                    if (newPwd !== confirmPwd) {
                        $msg.text('新密碼與確認密碼不一致').css('color', 'red');
                    } else {
                        $msg.text('').css('color', '');
                    }
                });
       
    </script>

    <script>    //讓js檔案能夠直接拿到後端傳來的 BoardGameTags 陣列內容
        try {   
                window.boardGameTags = @Html.Raw(JsonConvert.SerializeObject(Model.BoardGameTags ?? new List<string>()));
        } catch (e) {
            window.boardGameTags = [];
        }
    </script>
    <script>
        //用來初始化編輯失敗時畫面的方法
        function reinit() {
          if (window.initBoardGameTags) initBoardGameTags();
          if (window.initAvatarUploader) initAvatarUploader();
        }
        
        // MyPost 全域函數：處理儲存貼文編輯
        // 解決 Vue 事件綁定在動態載入 Partial View 中失效的問題
        function handleSavePostEdit() {
            // 檢查 Vue 實例是否存在且有 savePostEdit 方法
            if (window.myPostAppInstance && typeof window.myPostAppInstance.savePostEdit === 'function') {
                window.myPostAppInstance.savePostEdit();
            } else {
                console.error('Vue 實例或 savePostEdit 方法不存在');
                alert('功能暫時無法使用，請重新整理頁面後再試');
            }
        }
        
        // MyPost 全域函數：更新儲存按鈕狀態
        // 解決 Vue 響應式綁定在動態載入 Modal 中失效的問題
        function updateSaveButtonState(isSaving) {
            const button = document.getElementById('savePostButton');
            const spinner = document.getElementById('saveButtonSpinner');
            
            if (button && spinner) {
                button.disabled = isSaving;
                spinner.style.display = isSaving ? 'inline-block' : 'none';
            }
        }
        
        // MyPost 全域函數：處理刪除確認
        // 解決 Vue 事件綁定在動態載入 Partial View 中失效的問題
        function handleDeleteConfirm() {
            if (window.myPostAppInstance && typeof window.myPostAppInstance.deletePost === 'function') {
                window.myPostAppInstance.deletePost();
            } else {
                console.error('Vue 實例或 deletePost 方法不存在');
                alert('功能暫時無法使用，請重新整理頁面後再試');
            }
        }
        
        // MyPost 全域函數：更新刪除按鈕狀態
        function updateDeleteButtonState(isDeleting) {
            const button = document.getElementById('deleteConfirmButton');
            const spinner = document.getElementById('deleteButtonSpinner');
            
            if (button && spinner) {
                button.disabled = isDeleting;
                spinner.style.display = isDeleting ? 'inline-block' : 'none';
            }
        }
        
        // MyPost 全域函數：設定刪除 Modal 的貼文標題
        function setDeletePostTitle(title) {
            const titleElement = document.getElementById('deletePostTitle');
            if (titleElement) {
                titleElement.textContent = title || '此貼文';
            }
        }
    </script>

    <script src="~/js/edit-post-handler.js"></script>
    <!--控制隱私設定-->
    <script src="~/js/privacysetting.js"></script>
}

@Html.Partial("_DeleteUserNameModal")  <!--刪除帳號的彈跳視窗-->
<style> 
    /* Vue.js v-cloak 指令樣式 - 防止模板閃爍 */
    [v-cloak] {
        display: none !important;
    }
    
    /* 手機模式響應式設計 - 只影響此頁面 */
    @@media (max-width: 768px) {
        .main-container {
            grid-template-columns: 1fr !important;
            display: flex !important;
            flex-direction: column;
        }
        
        .sidebar {
            order: 1;
            padding: 1rem !important;
        }
        
        .container {
            order: 2;
            margin: 0 !important;
            padding: 1rem;
        }
        
        .sidebar-right {
            order: 3;
            border-start: none !important;
            border-top: 1px solid #dee2e6;
            padding: 1rem !important;
        }
        
        /* 手機版刪除按鈕區域排到最下面 */
        .delete-button-area {
            order: 4;
        }
        
        /* 手機版追蹤者列表樣式調整 */
        .sidebar-right h5 {
            font-size: 1.1rem;
        }
        
        .sidebar-right .d-flex {
            padding: 0.75rem 0 !important;
        }
        
        .sidebar-right img, .sidebar-right .bi-person-circle {
            width: 35px !important;
            height: 35px !important;
            font-size: 2rem !important;
        }
        
        .sidebar-right .btn-sm {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
        }
    }
    
    /* 平板模式 */
    @@media (min-width: 769px) and (max-width: 1024px) {
        .main-container {
            grid-template-columns: 200px 1fr 220px !important;
        }
        
        .sidebar {
            padding: 1.5rem 1rem !important;
        }
        
        .sidebar-right {
            padding: 1.5rem 1rem !important;
        }
    }

    

</style>